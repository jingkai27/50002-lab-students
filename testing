.include "8clocks.jsim"
.include "nominal.jsim"

* 2-input nand: inputs are a and b, output is z
.subckt nand2 a b z
MPD1 z a 1 0 NENH sw=8 sl=1
MPD2 1 b 0 0 NENH sw=8 sl=1
MPU1 z a vdd vdd PENH sw=9 sl=1
MPU2 z b vdd vdd PENH sw=9 sl=1
.ends

* inverter: input is a, output is z
.subckt inv a z
MPD1 z a 0 0 NENH sw=16 sl=1
MPU1 z a vdd vdd PENH sw=16 sl=1
.ends

* 2-input nor: inputs are a and b, output is z
.subckt nor2 a b z
MPD1 z a 0 0 NENH sw=8 sl=1
MPD2 z b 0 0 NENH sw=8 sl=1
MPU1 z a 1 vdd PENH sw=9 sl=1
MPU2 1 b vdd vdd PENH sw=9 sl=1
.ends

* 2-input xor: input is a and b, output is z
.subckt xor2 a b z
* Build your own xor gate here
* BEGIN ANSWER

XBLOOP a b noro nor2

MPU1 r a vdd vdd PENH sw=4 sl=1
MPU2 z noro r vdd PENH sw=4 sl=1
MPU3 r b vdd vdd PENH sw=4 sl=1

MPD1 z a q 0 NENH sw=2 sl=1
MPD2 q noro 0 0 NENH sw=2 sl=1
MPD3 z noro 0 0 NENH sw=2 sl=1
*END ANSWER
.ends

* 2-input xnor: input is a and b, output is z
.subckt xnor2 a b z
* Build your own xnor gate here
* BEGIN ANSWER
XGATE a b nandout nand2

MPU1 z nandout vdd vdd PENH sw=4 sl=1
MPU2 q b vdd vdd PENH sw=4 sl=1
MPU3 z a q vdd PENH sw=4 sl=1

MPD1 z nandout p 0 NENH sw=2 sl=1
MPD2 p b 0 0 NENH sw=2 sl=1 
MPD3 p a 0 0 NENH sw=2 sl=1

*END ANSWER
.ends

Xtestxor clk1 clk2 xor_out xor2 
Xtestxnor clk1 clk2 xnor_out xnor2

.tran 40ns 

.plot L(clk1)
.plot L(clk2)
.plot L(xor_out)
.plot L(xnor_out)