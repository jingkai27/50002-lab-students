.include "lab2adder4checkoff.jsim"
.include "nominal.jsim"

* 2-input nand: inputs are a and b, output is z
.subckt nand2 a b z
MPD1 z a 1 0 NENH sw=8 sl=1
MPD2 1 b 0 0 NENH sw=8 sl=1
MPU1 z a vdd vdd PENH sw=9 sl=1
MPU2 z b vdd vdd PENH sw=9 sl=1
.ends

* inverter: input is a, output is z
.subckt inv a z
MPD1 z a 0 0 NENH sw=16 sl=1
MPU1 z a vdd vdd PENH sw=16 sl=1
.ends

* 2-input nor: inputs are a and b, output is z
.subckt nor2 a b z
MPD1 z a 0 0 NENH sw=8 sl=1
MPD2 z b 0 0 NENH sw=8 sl=1
MPU1 z a 1 vdd PENH sw=9 sl=1
MPU2 1 b vdd vdd PENH sw=9 sl=1
.ends

* 2-input xor: input is a and b, output is z
.subckt xor2 a b z
* Build your own xor gate here
XPOOPOO a b noro nor2
MPD1 z a down 0 NENH sw=8 sl=1
MPD2 down b 0 0 NENH sw=8 sl=1
MPD3 z noro 0 0 NENH sw=8 sl=1
MPU1 up a vdd vdd PENH sw=9 sl=1
MPU2 up b vdd vdd PENH sw=9 sl=1
MPU3 z noro up vdd PENH sw=9 sl=1

*END ANSWER
.ends

* 2-input xnor: input is a and b, output is z
.subckt xnor2 a b z
* Build your own xnor gate here
XANDPOO a b nando nand2
MPD1 down a 0 0 NENH sw=8 sl=1
MPD2 down b 0 0 NENH sw=8 sl=1
MPD3 z nando down 0 NENH sw=8 sl=1
MPU1 z a up vdd PENH sw=9 sl=1
MPU2 up b vdd vdd PENH sw=9 sl=1
MPU3 z nando vdd vdd PENH sw=9 sl=1


*END ANSWER
.ends


* FA: 1-bit Full Adder circuit
* Input: a, b, ci 
* Output: s, co
.subckt FA a b ci s co
* write your FA circuitry here
XxorS1 a b sum1 xor2
XandS1 a b invC1 nand2
XinvS1 invC1 carry1 inv
XxorS2 sum1 ci s xor2
XandS2 sum1 ci invC2 nand2
XinvS2 invC2 carry2 inv
XorS1 carry1 carry2 invco nor2
XinvS3 invco co inv

*END ANSWER
.ends


.subckt ADDER4 a3 a2 a1 a0 b3 b2 b1 b0 s4 s3 s2 s1 s0
Xbit0 a0 b0 0 s0 c0 FA
Xbit1 a1 b1 c0 s1 c1 FA
Xbit2 a2 b2 c1 s2 c2 FA
Xbit3 a3 b3 c2 s3 s4 FA
.ends